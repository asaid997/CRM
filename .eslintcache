[{"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/index.js":"1","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/App.js":"2","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/reportWebVitals.js":"3","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/clients.js":"4","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/api.js":"5","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/client.js":"6","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/snackBar.js":"7","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/snackbars.jsx":"8","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/helpers/countries.js":"9","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/helpers/emailType.js":"10","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/helpers/owners.js":"11","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/clients/Client.jsx":"12","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/clients/ClientBar.jsx":"13","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/clients/Clients.jsx":"14","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/clients/dialog.jsx":"15","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Actions/actions.jsx":"16","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Actions/AddClient.jsx":"17","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Actions/Actions.jsx":"18","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/clients/Dialog.jsx":"19","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Actions/Update.jsx":"20","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Actions/ClientsAuto.jsx":"21","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/AC.jsx":"22","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Snackbars.jsx":"23","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Analytics/Dashboard.jsx":"24","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Analytics/Sales.jsx":"25","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Analytics/TopEmployees.jsx":"26"},{"size":1118,"mtime":1610864788011,"results":"27","hashOfConfig":"28"},{"size":1262,"mtime":1610864788006,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1610864788011,"results":"30","hashOfConfig":"28"},{"size":2146,"mtime":1610864788362,"results":"31","hashOfConfig":"28"},{"size":1838,"mtime":1610864788007,"results":"32","hashOfConfig":"28"},{"size":1856,"mtime":1610864788012,"results":"33","hashOfConfig":"28"},{"size":746,"mtime":1610864788013,"results":"34","hashOfConfig":"28"},{"size":660,"mtime":1610708180130,"results":"35","hashOfConfig":"28"},{"size":734,"mtime":1610864788362,"results":"36","hashOfConfig":"28"},{"size":696,"mtime":1610864788363,"results":"37","hashOfConfig":"28"},{"size":742,"mtime":1610864788363,"results":"38","hashOfConfig":"28"},{"size":903,"mtime":1610864788010,"results":"39","hashOfConfig":"28"},{"size":1424,"mtime":1610864788010,"results":"40","hashOfConfig":"28"},{"size":3322,"mtime":1610864788010,"results":"41","hashOfConfig":"28"},{"size":2562,"mtime":1610662348054,"results":"42","hashOfConfig":"28"},{"size":194,"mtime":1610662339740,"results":"43","hashOfConfig":"28"},{"size":2218,"mtime":1610864788008,"results":"44","hashOfConfig":"28"},{"size":950,"mtime":1610864788008,"results":"45","hashOfConfig":"28"},{"size":2887,"mtime":1610864788010,"results":"46","hashOfConfig":"28"},{"size":2704,"mtime":1610864788008,"results":"47","hashOfConfig":"28"},{"size":1038,"mtime":1610670929069,"results":"48","hashOfConfig":"28"},{"size":915,"mtime":1610864788007,"results":"49","hashOfConfig":"28"},{"size":660,"mtime":1610864788009,"results":"50","hashOfConfig":"28"},{"size":4007,"mtime":1610864788362,"results":"51","hashOfConfig":"28"},{"size":816,"mtime":1610864788362,"results":"52","hashOfConfig":"28"},{"size":729,"mtime":1610864788009,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"frm9u1",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/index.js",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/App.js",[],["114","115"],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/reportWebVitals.js",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/clients.js",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/api.js",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/client.js",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/snackBar.js",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/snackbars.jsx",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/helpers/countries.js",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/helpers/emailType.js",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/stores/helpers/owners.js",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/clients/Client.jsx",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/clients/ClientBar.jsx",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/clients/Clients.jsx",["116"],"import { Grid, withStyles } from \"@material-ui/core\"\nimport { inject, observer } from \"mobx-react\"\nimport React, { useEffect, useState } from \"react\"\nimport Client from \"./Client\"\nimport Table from \"@material-ui/core/Table\"\nimport TableBody from \"@material-ui/core/TableBody\"\nimport TableCell from \"@material-ui/core/TableCell\"\nimport TableContainer from \"@material-ui/core/TableContainer\"\nimport TableHead from \"@material-ui/core/TableHead\"\nimport TableRow from \"@material-ui/core/TableRow\"\nimport Paper from \"@material-ui/core/Paper\"\nimport ClientBar from \"./ClientBar\"\nimport AlertDialog from \"./Dialog\"\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#FF8C61\",\n    color: theme.palette.common.white,\n  },\n}))(TableCell)\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow)\n\nfunction Clients(props) {\n  const { clientsStore } = props\n  const [openD, setOpenD] = useState(false)\n  const [userToUpdate, setUser] = useState({id: -1,first: \"\",last: \"\",country: \"\"})\n  const [localClients, setLocalClients] = useState([])\n  const [page, setPage] = useState(0)\n  const [filter, setFilter] = useState(\"\")\n  const [filterBy, setFilterBy] = useState(\"\")\n  const rows = 20\n\n  const handleClickOpen = () => setOpenD(true)\n  const handleClose = () => setOpenD(false)\n  const handleChangePage = (_, newPage) => setPage(newPage)\n  const filterByHandler = (event) => setFilterBy(event.target.value)\n  const filterHandler = (event) => {\n    setPage(0)\n    const { value } = event.target\n    setFilter(value)\n  }\n\n  useEffect(() => {\n    if (filterBy !== \"\")\n      setLocalClients(\n        clientsStore.clients.filter(\n          c =>\n            c[filterBy] &&\n            c[filterBy]\n              .toString()\n              .toLocaleLowerCase()\n              .match(filter.toLocaleLowerCase())\n        )\n      )\n  }, [filter, filterBy])\n  useEffect(() => setLocalClients(clientsStore.clients), [clientsStore.clients])\n\n  const header = [\n    \"First\",\n    \"Last\",\n    \"Email\",\n    \"Sold\",\n    \"Date\",\n    \"Email type\",\n    \"Owner\",\n    \"Country\",\n  ]\n\n  const barProps = {\n    filterHandler,\n    handleChangePage,\n    filterByHandler,\n    localClients,\n    page,\n    filterBy,\n  }\n  const alertDialogProps = {\n    open: openD,\n    handleClose,\n    userToUpdate,\n  }\n  const clientProps = {\n    setUser,\n    handleClickOpen,\n  }\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\">\n      <ClientBar {...barProps} />\n      <Grid item xs={10}>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <StyledTableRow>\n                {header.map((h) => (\n                  <StyledTableCell key={h} align=\"center\">\n                    {h}\n                  </StyledTableCell>\n                ))}\n              </StyledTableRow>\n            </TableHead>\n            <TableBody>\n              {localClients.slice(page * rows, (page + 1) * rows).map((c) => (\n                <Client key={c.id} {...c} {...clientProps} />\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Grid>\n      <AlertDialog {...alertDialogProps} />\n    </Grid>\n  )\n}\n\nexport default inject(\"clientsStore\")(observer(Clients))\n","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/clients/dialog.jsx",["117"],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Actions/actions.jsx",["118"],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Actions/AddClient.jsx",["119"],"import React, { useEffect, useState } from \"react\"\nimport { Button, TextField } from \"@material-ui/core\"\nimport { observer, inject } from \"mobx-react\"\nimport AC from \"../AC\"\n\nfunction AddClient(props) {\n  const { snackBarStore, ownerStore, clientsStore, clss, countrieStore,validateInput } = props\n\n  const fields = [\"first\", \"last\", \"email\"]\n  const [vals, setVals] = useState({\n    first: \"\",\n    last: \"\",\n    email: \"\",\n    country: \"\",\n    owner: \"\",\n  })\n\n  const changeHandler = (event) => {\n    const { name, value } = event.target\n    setVals({ ...vals, [name]: value })\n  }\n  const countryHandler = (_, val) => setVals({ ...vals, country: val })\n  const ownerHandler = (_, val) => setVals({ ...vals, owner: val })\n\n\n  const addClient = async () => {\n    if(Object.keys(vals).every(k => validateInput(vals[k],`${k} is empty`))){\n      const result = await clientsStore.ac_addClient({\n        first: vals.first,\n        last: vals.last,\n        country: vals.country,\n        ownerId: ownerStore.byName(vals.owner),\n        email: vals.email,\n      })\n\n      console.log(result)\n      result\n        ? snackBarStore.alertSuccess(\"Added\")\n        : snackBarStore.alertSuccess(\"Added\")\n    }\n  }\n\n  return (\n    <div>\n      <h2>ADD CLIENT</h2>\n      {fields.map((f) => (\n        <div key={f}>\n          <TextField\n            key={f}\n            label={f}\n            margin=\"normal\"\n            variant=\"outlined\"\n            name={f}\n            onChange={changeHandler}\n            className={clss.root}\n          ></TextField>\n        </div>\n      ))}\n      <div>\n        <AC\n          options={countrieStore.countries.map((c) => c.country)}\n          label=\"country\"\n          handler={countryHandler}\n          clss={clss.root}\n        />\n      </div>\n      <div>\n        <AC\n          options={ownerStore.owners.map((o) => o.owner)}\n          label=\"owner\"\n          handler={ownerHandler}\n          clss={clss.root}\n        />\n      </div>\n      <div>\n        <Button variant=\"contained\" color=\"primary\" onClick={addClient}>\n          Add Client\n        </Button>{\" \"}\n      </div>\n    </div>\n  )\n}\n\nexport default inject(\"snackBarStore\",\"ownerStore\",\"clientsStore\",\"countrieStore\")(observer(AddClient))\n","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Actions/Actions.jsx",["120"],"import { Grid, makeStyles } from \"@material-ui/core\";\nimport { inject, observer } from \"mobx-react\";\nimport React, { useState } from \"react\";\nimport AddClient from \"./AddClient\";\nimport Update from \"./Update\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"30vw\",\n      height: \"8vh\",\n    },\n  },\n}));\n\nfunction Actions(props) {\n  const classes = useStyles();\n\n  const { snackBarStore } = props;\n\n  const validateInput = (i, output) => {\n    if (i === \"\") {\n      snackBarStore.alertFailure(output);\n      return false;\n    }\n    return true;\n  };\n\n  return (\n    <Grid container item xs={10}>\n      <Grid item xs={6}>\n        <AddClient clss={classes} validateInput={validateInput} />\n      </Grid>\n      <Grid item xs={6}>\n        <Update clss={classes} validateInput={validateInput} />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default inject(\"snackBarStore\")(observer(Actions));\n","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/clients/Dialog.jsx",["121"],"import React, { useEffect, useState } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Input, TextField, makeStyles } from \"@material-ui/core\";\nimport AC from \"../AC\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"35ch\",\n    },\n  },\n}));\n\nfunction AlertDialog(props) {\n  const classes = useStyles();\n\n  const {\n    open,\n    handleClose,\n    userToUpdate,\n    clientsStore,\n    snackBarStore,\n    countrieStore,\n  } = props;\n\n  const [vals, setVals] = useState({});\n  const [country, setCountry] = useState(\"\");\n\n  useEffect(() => {\n    setVals({ first: userToUpdate.first, last: userToUpdate.last });\n    setCountry(userToUpdate.country);\n  }, [userToUpdate]);\n\n  const save = async () => {\n    const result = await clientsStore.cl_updateClient(\n      userToUpdate.id,\n      vals.first,\n      vals.last,\n      country\n    );\n    result\n      ? snackBarStore.alertSuccess(\"Changed\")\n      : snackBarStore.alertFailure(\"Value wasnt changed due to an issue\");\n    handleClose();\n  };\n\n  const inputHandler = (event) => {\n    const { value, name } = event.target;\n    setVals({ ...vals, [name]: value });\n  };\n  const countryHandler = (_, val) => setCountry(val);\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle id=\"alert-dialog-title\">Update</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {Object.keys(vals).map((k) => (\n              <div key={k}>\n                <TextField\n                  className={classes.root}\n                  label={k}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  value={vals[k]}\n                  name={k}\n                  onChange={inputHandler}\n                />\n              </div>\n            ))}\n            <AC\n              options={countrieStore.countries.map((c) => c.country)}\n              label=\"country\"\n              holder={country}\n              handler={countryHandler}\n              clss={classes.root}\n            />\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n          <Button onClick={save} color=\"primary\" autoFocus>\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default inject(\n  \"clientsStore\",\n  \"snackBarStore\",\n  \"countrieStore\"\n)(observer(AlertDialog));\n","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Actions/Update.jsx",["122","123"],"import { Button, Grid, TextField } from \"@material-ui/core\"\nimport { inject, observer } from \"mobx-react\"\nimport React, { useState } from \"react\"\nimport apiManager from \"../../api\"\nimport AC from \"../AC\"\n\nfunction Update(props) {\n  const { clss, clientsStore, ownerStore, emailTypeStore,snackBarStore,validateInput } = props\n  const [owner, setOwner] = useState(\"\")\n  const [client, setClient] = useState(\"\")\n  const [emailType, setEmailType] = useState(\"\")\n  const clientHandler = (_, val) => setClient(val)\n  const ownerHandler = (_, val) => setOwner(val)\n  const emailHandler = (_, val) => setEmailType(val)\n\n    const handleResults = (flag,success,failure) => flag ? snackBarStore.alertSuccess(success) : snackBarStore.alertFailure(failure)\n\n  const failureOutput = field => `Choose a ${field} from the list`\n\n  const transferHandler = async () => {\n    if(validateInput(client,failureOutput(\"client\")) && validateInput(emailType,failureOutput(\"email type\")))\n        handleResults(await clientsStore.ac_transfer(client,emailType),\"Sent\",\"Failed\")\n  }\n  const changeOwnerHandler = async () => {\n    if(validateInput(client,failureOutput(\"client\")) && validateInput(owner,failureOutput(\"owner\")))\n        handleResults(await clientsStore.ac_changeOwner(client,owner),\"Changed owner\",\"Owner was not changed\")\n  }\n  const declareHandler = async () => {\n    if(validateInput(client,failureOutput(\"client\")))\n        handleResults(await clientsStore.ac_declareSale(client),\"Sold\",\"Failed\")\n  }\n\n  return (\n    <div>\n      <h2>UPDATE</h2>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <AC\n            options={clientsStore.clients.map((c) => `${c.first} ${c.last}`)}\n            label=\"Choose client to update\"\n            handler={clientHandler}\n            clss={clss.root}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <AC\n            options={ownerStore.owners.map(c => c.owner)}\n            label=\"owner\"\n            handler={ownerHandler}\n            clss={clss.root}\n          />\n          <Button color=\"primary\" onClick={changeOwnerHandler}>Transfer</Button>\n        </Grid>\n        <Grid item xs={12}>\n          <AC \n            options={emailTypeStore.types.map(e => e.email_type)}\n            label=\"email type\"\n            handler={emailHandler}\n            clss={clss.root}\n          />\n            <Button color=\"primary\" onClick={transferHandler}>Send email</Button>\n        </Grid>\n        <Grid item xs={12}>\n          <Button color=\"primary\" onClick={declareHandler}>Declare sale</Button>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\n\nexport default inject(\"clientsStore\",\"ownerStore\",\"emailTypeStore\",\"snackBarStore\")(observer(Update))\n","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Actions/ClientsAuto.jsx",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/AC.jsx",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Snackbars.jsx",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Analytics/Dashboard.jsx",["124","125","126","127"],"import { Fab, Grid, InputLabel, MenuItem, Select } from \"@material-ui/core\"\nimport PublicIcon from '@material-ui/icons/Public'\nimport EmailIcon from '@material-ui/icons/Email'\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney'\nimport { inject, observer } from \"mobx-react\"\nimport React, { useEffect, useState } from \"react\"\nimport apiManager from \"../../api\"\nimport Sales from \"./Sales\"\nimport TopEmployees from \"./TopEmployees\"\n\n\nfunction Dashboard(props) {\n  const { countrieStore, ownerStore, emailTypeStore,clientsStore } = props\n\n  const [salesByDate, setSalesByDate] = useState([])\n  const [salesByEmployees, setSalesByEmployees] = useState([])\n  const [salesByMonth, setSalesByMonth] = useState([])\n  const [salesByEmail, setSalesByEmail] = useState([])\n  const [salesByCountry, setSalesByCountry] = useState([])\n  const [filter, setFilter] = useState(\"email\")\n\n  const filterHandler = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n  }\n\n  const filterType = {\n    email: salesByEmail,\n    country: salesByCountry,\n    employees: salesByEmployees,\n    \"months(all time)\": salesByMonth,\n  }\n\n  const gridProps = {\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    xs: 6,\n  }\n\n  const state = (color,icon,title,data) => (\n    <Grid container direction=\"column\" justify=\"center\" align=\"center\">\n      <Grid item>\n        <Fab style={{backgroundColor: color}}>\n          {icon}\n        </Fab>\n      </Grid>\n      <Grid item>\n        <div>\n            <h5>{title}</h5>\n            <div>{data}</div>\n        </div>\n      </Grid>\n    </Grid>\n  )\n\n  useEffect(() => {\n    apiManager.dash_salesByDate().then(setSalesByDate).catch(console.log)\n    apiManager.dash_salesByMonth().then((data) => data && setSalesByMonth(data.map((d) => {return { sales: parseInt(d.sales), key: d.month }}))).catch(console.log)\n  }, [])\n  useEffect(() => {\n    apiManager.dash_salesByEmployee().then((data) => data && setSalesByEmployees(data.map((d) => {return {sales: parseInt(d.sales),key: ownerStore.byId(d.owner_id)}}))).catch(console.log)\n  }, [ownerStore.owners])\n\n  useEffect(() => {apiManager.dash_salesByEmail().then((data) => data && setSalesByEmail(data.map((d) => {return {sales: parseInt(d.sales),key: emailTypeStore.byId(d.email_type_id)}}))).catch(console.log)\n  }, [emailTypeStore.types])\n\n  useEffect(() => {apiManager.dash_salesByCountry().then((data) => data && setSalesByCountry(data.map((d) => {return {sales: parseInt(d.sales),key: countrieStore.byId(d.country_id)}}))).catch(console.log)\n  }, [countrieStore.countries])\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={6}>\n        <h2>Top employees</h2>\n        <TopEmployees\n          data={salesByEmployees && salesByEmployees.slice(0, 3)}\n          clr=\"#B9B9CA\"\n        />\n      </Grid>\n      <Grid item xs={6}>\n        <h2>\n          Sales by{\" \"}\n          <Select value={filter} onChange={filterHandler}>\n            {Object.keys(filterType).map((k) => (\n              <MenuItem key={k} value={k}>\n                {k}\n              </MenuItem>\n            ))}\n          </Select>\n        </h2>\n        <TopEmployees data={filterType[filter]} />\n      </Grid>\n      <Grid item xs={6}>\n        <h2>Last 30 documented days</h2>\n        <Sales salesByDate={salesByDate && salesByDate.slice(0, 30)} />\n      </Grid>\n      <Grid item container xs={6}>\n        <Grid item container {...gridProps}>\n            {state(\"#ffea00\",<AttachMoneyIcon/>,\"outstanding clients\",clientsStore.outstanding_clients)}\n        </Grid>\n        <Grid item container {...gridProps}>\n            {state(\"#4caf50\",<PublicIcon/>,\"Hottest country\",salesByCountry[0] && salesByCountry[0].key)}\n        </Grid>\n        <Grid item container {...gridProps}>\n            {state(\"#00e5ff\",<EmailIcon/>,\"Emails sent\",clientsStore.emails_sent)}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default inject(\"countrieStore\",\"ownerStore\",\"emailTypeStore\",\"clientsStore\")(observer(Dashboard))\n","/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Analytics/Sales.jsx",[],"/Users/Androwsa/Desktop/Elavation/Ele/projects/crm/src/components/Analytics/TopEmployees.jsx",["128"],"import React from \"react\";\nimport {BarChart,Bar,Cell,XAxis,YAxis,CartesianGrid,Tooltip,Legend, ResponsiveContainer,} from \"recharts\";\n\nfunction TopEmployees(props) {\n  const { data,clr } = props;\n  \n  return (\n    <ResponsiveContainer width=\"100%\" height={200}>\n      <BarChart\n        width={500}\n        height={300}\n        data={data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"key\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"sales\" fill={clr || \"#8884d8\"} />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n\nexport default TopEmployees",{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":62,"column":6,"nodeType":"135","endLine":62,"endColumn":24,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":9,"column":10,"nodeType":"139","messageId":"140","endLine":9,"endColumn":15},{"ruleId":"137","severity":1,"message":"141","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":25},{"ruleId":"137","severity":1,"message":"142","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":26},{"ruleId":"137","severity":1,"message":"141","line":3,"column":17,"nodeType":"139","messageId":"140","endLine":3,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":9,"column":10,"nodeType":"139","messageId":"140","endLine":9,"endColumn":15},{"ruleId":"137","severity":1,"message":"143","line":1,"column":24,"nodeType":"139","messageId":"140","endLine":1,"endColumn":33},{"ruleId":"137","severity":1,"message":"144","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":18},{"ruleId":"137","severity":1,"message":"145","line":1,"column":21,"nodeType":"139","messageId":"140","endLine":1,"endColumn":31},{"ruleId":"133","severity":1,"message":"146","line":63,"column":6,"nodeType":"135","endLine":63,"endColumn":25,"suggestions":"147"},{"ruleId":"133","severity":1,"message":"148","line":66,"column":6,"nodeType":"135","endLine":66,"endColumn":28,"suggestions":"149"},{"ruleId":"133","severity":1,"message":"150","line":69,"column":6,"nodeType":"135","endLine":69,"endColumn":31,"suggestions":"151"},{"ruleId":"137","severity":1,"message":"152","line":2,"column":22,"nodeType":"139","messageId":"140","endLine":2,"endColumn":26},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'clientsStore.clients'. Either include it or remove the dependency array.","ArrayExpression",["155"],"no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'TextField' is defined but never used.","'apiManager' is defined but never used.","'InputLabel' is defined but never used.","React Hook useEffect has a missing dependency: 'ownerStore'. Either include it or remove the dependency array.",["156"],"React Hook useEffect has a missing dependency: 'emailTypeStore'. Either include it or remove the dependency array.",["157"],"React Hook useEffect has a missing dependency: 'countrieStore'. Either include it or remove the dependency array.",["158"],"'Cell' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [clientsStore.clients, filter, filterBy]",{"range":"167","text":"168"},"Update the dependencies array to be: [ownerStore, ownerStore.owners]",{"range":"169","text":"170"},"Update the dependencies array to be: [emailTypeStore, emailTypeStore.types]",{"range":"171","text":"172"},"Update the dependencies array to be: [countrieStore, countrieStore.countries]",{"range":"173","text":"174"},[1949,1967],"[clientsStore.clients, filter, filterBy]",[2098,2117],"[ownerStore, ownerStore.owners]",[2330,2352],"[emailTypeStore, emailTypeStore.types]",[2565,2590],"[countrieStore, countrieStore.countries]"]